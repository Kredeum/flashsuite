const { expect } = require("chai");
const { ethers } = require("hardhat");


describe("FlashAccounts deployment and run", function () {
  this.timeout(0);

  it("Should run FlashAccounts and start FlashLoan", async function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // CONSTANTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    const kovanLendingPool = "0x88757f2f99175387ab4c6a4b3067c77a695b0349";
    const collSNX = 20;
    const flashBorrowedDAI = 10;
    const flashLoanFee = 1;
    const bobBorrowedDAI = flashBorrowedDAI + flashLoanFee;
    const DAI = "0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD";
    const aSNX = "0xAA74AdA92dE4AbC0371b75eeA7b1bd790a69C9e1";
    const sDAI = "0x3B91257Fe5CA63b4114ac41A0d467D25E2F747F3";
    const xp = "https://kovan.etherscan.io";
    console.log(`DAI       ${xp}/address/${DAI}`);
    console.log(`sDAI      ${xp}/address/${sDAI}`);
    console.log(`aSNX      ${xp}/address/${aSNX}`);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SIGNERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    const [Bob, Alice] = (await ethers.getSigners());
    expect(Alice.address).to.match(/^0x/);
    expect(Bob.address).to.match(/^0x/);
    
    console.log(`Alice     ${xp}/address/${Alice.address}`);
    console.log(`Bob       ${xp}/address/${Bob.address}`);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TX0 : Create FlashAccounts contract
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    const FlashAccounts = await ethers.getContractFactory("FlashAccounts", Bob);
    const flashAccounts = await FlashAccounts.deploy(kovanLendingPool);
    expect(await flashAccounts.isOwner()).to.be.true;
    console.log(`Contract  ${xp}/address/${flashAccounts.address}`);

    const tx0 = (await flashAccounts.deployed()).deployTransaction;
    expect(tx0.hash).to.match(/^0x/);
    console.log(`TX0       ${xp}/tx/${tx0.hash}`);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TX1 : Get aSNX allowance
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    const aSNXcontrat = await ethers.getContractAt("contracts/aave/Interfaces.sol:IERC20", aSNX, Alice);
    const tx1 = await aSNXcontrat.approve(flashAccounts.address, ethers.utils.parseEther(collSNX.toString()));
    expect(tx1.hash).to.match(/^0x/);
    console.log(`TX1 Allow ${xp}/tx/${tx1.hash}`);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TX2 : Get Credit Delegation approval 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    const stableDebtDAIcontract = await ethers.getContractAt("contracts/aave/Interfaces.sol:IStableDebtToken", sDAI);
    const tx2 = await stableDebtDAIcontract.connect(Bob).approveDelegation(flashAccounts.address, ethers.utils.parseEther(bobBorrowedDAI.toString()));
    await tx2.wait();
    console.log(`TX2 CD    ${xp}/tx/${tx2.hash}`);

    // allowance verification
    const allowance = await stableDebtDAIcontract.borrowAllowance(Bob.address, flashAccounts.address);
    console.log(`Allowance ${allowance.toString()}`);
    expect(allowance.toString() == bobBorrowedDAI.toString());
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TX3 : Run Flash Loan
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    try {
      const tx3 = await flashAccounts.connect(Alice).swap(Alice.address, Bob.address);
      expect(tx3.hash).to.match(/^0x/);
      console.log(`TX3 Flash ${xp}/tx/${tx3.hash}`);
      await tx3.wait();
    } catch (e) {
      console.error("ERROR", e);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TX4 : Get crumbs back
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    finally {
      const tx4 = await flashAccounts.rugPull();
      console.log(`TX4       ${xp}/tx/${tx4.hash}`);
    }

  });
});
